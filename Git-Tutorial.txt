YT Tutorial: https://www.youtube.com/watch?v=HVsySz-h9r4


In der Datei .gitignore können Dateien und Wildcare definiert werden, welche Dateien nicht getrackt werden sollen.


Kurze Erklärung:
    - Im ausgewählten VZ mit "git init" ein neues Rep erstellen. Dieses Verzeichnis wird nun getrackt.
    - "git clone <url>" um ein Repository zu clonen
    - Mit "git status" können Veränderungen im Ordner eingesehen werden.
    - Dann "git add ["meineFiles"]" Dateien aus VZ in die SafeStage hinzufügen.
    - Mit "git commit -m "Aussagekräftige Nachricht". Dateien werden von der SafeArea ins lokale Repository gespeichert.
    - "git remote add <shortname> <url>" Remote-Adresse hinzufügen.
    - "git remote -v" Bestehende Verbindungen eingesehen
    - Immer erst "git pull origin <branch>, dann "git push origin <branch> um lokales Repository mit Repository abzugleichen.   


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                                               *
* -----------------------------------Befehlsübersicht------------------------------------------ *
*                                                                                               *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


git <option> -h             ==> Dokumentation zur jeweiligen Option

git init                    ==> Erstellen eines neues Repositorys

git status                  ==> Gibt Änderungen in Files gegenüber dem lokalen Git an
git log                     ==> Details zum jeweiligen Commit
git reset                   ==> files aus SafeArea entfernen
git reset *.html            ==> entfernt alle .html Dateien aus SafeArea
git add -A                  ==> alle Files in SafeArea
git add *.html              ==> alle .html Files in SafeArea
git commit -m "Text"        ==> schreibt Daten aus SafeArea in das lokale Git
git clone <url> .           ==> Klont das ausgewählte Repository ( Remote oder lokal)

git remote -v               ==> gibt Pfad zu Repository an
git remote add <shortname> <url> ==> Mit einem externen Repository verbinden

git branch -a               ==> gibt die verschiedenen Versionen an
git branch calc-divide      ==> Fügt einen Branch calc-divide hinzu
git branch -d calc-divide   ==> löscht den angegebenen Branch (lokal)
git branch --merged         ==> Dieser Branch wird zum abgleichen mit einem anderen Branch freigegeben

git checkout master         ==> Switch zum master Branch

git merge calc-divide       ==> Der Branch calc-divide wird auf den ausgewählten Branch aufgespielt ( das Ganze passiert lokal)

git diff                    ==> zeigt die Änderungen im Code, bei mehreren Branch's an

git pull origin master      ==> lokales Repository wird mit Repository abgeglichen
git pull origin master --allow-unrelated-histories ==> Wenn Fehlermeldung: fatal: refusing to merge unrelated histories
git push origin master      ==> Repository erhält Informationen aus lokalem Repository
git push origin --delete calc-divide   ==> löscht den angegebenen Branch